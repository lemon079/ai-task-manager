datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  tasks          Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Priority {
  low
  medium
  high
}

enum Status {
  pending
  in_progress
  completed
}

model Task {
  id               String    @id @default(cuid())
  userId           String
  title            String
  priority         Priority  @default(medium) // ✅ Enum instead of String
  status           Status    @default(pending) // ✅ Enum instead of String
  dueDate          DateTime? // ✅ New field for deadlines
  createdAt        DateTime  @default(now())
  deadlineNotified Boolean   @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
}
